class Solution {
public:

int countRotations(vector<int> nums, int low, int high)
{
    low = 0, high = nums.size() - 1;
    int n=nums.size();
    while (low <= high)
    {
        if (nums[low] <= nums[high]) 
            return low;
        int mid = (low + high) / 2;
        int next = (mid + 1) % n;
        int prev = (mid - 1 + n) % n;
 
        if (nums[mid] < nums[next] && nums[mid] < nums[prev]) {
            return mid;
        }
 
        else if (nums[mid] <= nums[high]) {
            high = mid - 1;
        }
 
        else if (nums[mid] >= nums[low]) {
            low = mid + 1;
        }
    }

    return -1;
}
    int binary(vector<int> nums,int target)
    {
     int low=0,high=nums.size()-1;
     while(low<=high)
     {
         int mid=low+(high-low)/2;
         if(nums[mid]==target)
             return mid;
         else if(nums[mid]<target)
             low=mid+1;
         else
             high=mid-1;
     }   
        return -1;
    }
    int search(vector<int>& nums, int target) 
    {
        int i=countRotations(nums,0,nums.size()-1);
        vector<int> arr(nums.begin(),nums.begin()+i);
        int ans=binary(arr,target);
        if(ans!=-1)
            return ans;
        vector<int> arr2(nums.begin()+i,nums.end());
        ans=binary(arr2,target);
        if(ans!=-1)
            return ans+i;
        return -1;
    }

};
