class MyCircularQueue {
public:
   int n;
int arr[1000];
int back,front;
int cnt;
MyCircularQueue(int k) {
    n = k;
    back = -1;
    front = 0;
    cnt=0;
}

bool enQueue(int value) {
    if(isFull()){
        return false;
    }
    cnt++;
    back = (back + 1)%n;
    arr[back] = value;
    return true;
}

bool deQueue() {
    if(isEmpty()){
        return false;
    }
    cnt--;
    front = (front +1)%n;
    return true;
}

int Front() {
    if( cnt > 0){
        return arr[front];    
    }
    return -1;
}

int Rear() {
    if(back>= 0 && cnt > 0){
        return arr[back];    
    }
    return -1;
}

bool isEmpty() {
    if(cnt == 0){
        return true;
    }
    return false;
}

bool isFull() {
    if(cnt == n){
        return true;
    }
    return false;
}
};
/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
