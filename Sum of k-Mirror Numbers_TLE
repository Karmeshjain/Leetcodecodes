class Solution {
public:
    string integer_to_string(int n, int base)
{
    string str;
    while (n > 0) {
        int digit = n % base;
        n /= base;
        str.push_back(digit + '0');
    }
    return str;
}
 
// function to check for palindrome
long long isPalindrome(int i, int k)
{
    long long temp = i;
     
    // m stores reverse of a number
    long long m = 0;
    while (temp > 0) {
        m = temp % 10 + m * 10;
        temp /= 10;
    }
     
    // if reverse is equal to number
    if (m == i) {
     
        // converting to base k
        string str = integer_to_string(m, k);
        string str1 = str;
     
        // reversing number in base k
        reverse(str.begin(), str.end());
     
        // checking palindrome in base k
        if (str == str1) {
            return i;
        }
    }
    return 0;
}
 
    long long kMirror(int k, int n) 
    {
         long long sum = 0;
    for (int i = 1;n>0; i++) 
    {
        int temp=isPalindrome(i, k);
        if(temp!=0)
        {sum += temp;
        n--;}
       
    }
   return sum;
        
    }
};
