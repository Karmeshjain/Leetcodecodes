/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> res;
    bool isLeaf(TreeNode* node)
    {
    return (node->left == nullptr && node->right == nullptr);
    }

    
void printRootToleafPaths(TreeNode* node, vector<int> &path,int targetSum)
{
    if (node == nullptr) {
        return;
    }
    path.push_back(node->val);
    if (isLeaf(node))
    {
        int sum=0;
        for (int data: path) {
            cout << data << " ";
            sum+=data;
        }
        if(targetSum==sum)
            res.push_back(path);
        cout << endl;
    }
    printRootToleafPaths(node->left, path,targetSum);
    printRootToleafPaths(node->right, path,targetSum);
    path.pop_back();
}
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) 
    {
        vector<int> path;
        printRootToleafPaths(root,path,targetSum);
        return res;
    }
};
