class Solution {
public:
    
     long long m=1;
     long long n=2;
   long long count(string a, string b)
{
     long long m = a.length();
     long long n = b.length();
     long long lookup[m + 1][n + 1];

    for ( long long i = 0; i <= n; ++i)
        lookup[0][i] = 0;
 
    for ( long long i = 0; i <= m; ++i)
        lookup[i][0] = 1;
    for ( long long i = 1; i <= m; i++)
    {
        for ( long long j = 1; j <= n; j++)
        {
            if (a[i - 1] == b[j - 1])
                lookup[i][j] = lookup[i - 1][j - 1] +
                               lookup[i - 1][j];
            else
                lookup[i][j] = lookup[i - 1][j];
        }
    }
 
    return lookup[m][n];
}
 
    long long maximumSubsequenceCount(string text, string pattern) 
    {
        string x=text;
        x.push_back(pattern[1]);
        string y="";
        y+=pattern[0]+text;
        return max(count(x,pattern),count(y,pattern));
    }
};
