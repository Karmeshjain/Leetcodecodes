class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        if (rows == 0)
            return matrix;
        int cols = matrix[0].size();
        queue<pair<int,int>> q;
        vector<vector<int>> dist(rows, vector<int> (cols, INT_MAX));
        for (int i = 0; i < rows; i++) 
        {
            for (int j = 0; j < cols; j++) 
            {
                if (matrix[i][j] == 0)
                {
                    dist[i][j]=0;
                    q.push({i,j});
                }
                
            }
            
        }
        int dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}};
        while(!q.empty())
        {
            pair<int,int> curr=q.front();
            q.pop();
            for(int i=0;i<4;i++)
            {
                int r=dir[i][0]+curr.first,c=dir[i][1]+curr.second;
                if(r>=0&&c>=0&&r<rows&&c<cols)
                {
                    if(dist[r][c]>dist[curr.first][curr.second]+1)
                    {
                    dist[r][c]=dist[curr.first][curr.second]+1;
                    q.push({r,c});
                        cout<<dist[r][c]<<dist[curr.first][curr.second]<<endl;
                    }
                }
            }
        }
        
        return dist;
    }
};
