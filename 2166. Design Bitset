
class Bitset {
public:
    vector<bool> bset;
    vector<bool> bset2;
    int onec=0;
    int sz=0;
    Bitset(int size) {
       bset.resize(size);
          bset2.resize(size);
        fill(bset.begin(), bset.end(),0);
          fill(bset2.begin(), bset2.end(),1);
        sz=size;
    }
    
    void fix(int idx) {
         if(bset[idx]==0)
          onec++;
        bset[idx]=1;
        bset2[idx]=0;
    }
    
    void unfix(int idx) {
        if(bset[idx]==1)
        onec--;
        bset[idx]=0;
         bset2[idx]=1;
    }
    
    void flip() {
     swap(bset,bset2);
        onec=sz-onec;
    }
    
    bool all() {
        if(sz==onec)
        return true;
        return false;
    }
    
    bool one() {
            if(onec)
               return true;
        return false;
    }
    
    int count() {
       return onec;
    }
    
    string toString() {
        string ans;
          for(int i=0;i<bset.size();i++)
           ans+=(to_string(bset[i]));
        return ans;
    }
};

/**
 * Your Bitset object will be instantiated and called as such:
 * Bitset* obj = new Bitset(size);
 * obj->fix(idx);
 * obj->unfix(idx);
 * obj->flip();
 * bool param_4 = obj->all();
 * bool param_5 = obj->one();
 * int param_6 = obj->count();
 * string param_7 = obj->toString();
 */
